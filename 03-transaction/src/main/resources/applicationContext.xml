<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:aop="http://www.springframework.org/schema/aop"
     xmlns:tx="http://www.springframework.org/schema/tx"
     xsi:schemaLocation="
     http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx.xsd
     http://www.springframework.org/schema/aop
     http://www.springframework.org/schema/aop/spring-aop.xsd"
     default-autowire="byName">

	<!-- 1. dataSource -->
	<!--<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">-->
		<!--<property name="driverClassName" value="com.mysql.jdbc.Driver"/>-->
		<!--<property name="url" value="jdbc:mysql://localhost:3306/spring"/>-->
		<!--<property name="username" value="root"/>-->
		<!--<property name="password" value="root"/>-->
	<!--</bean>-->
    <bean id="dataSource" class="com.tz.spring.MyDataSourceFactoryBean"/>
	
	<!-- 2.sessionFactory -->
	<bean id="sessionFactory" 
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 1/3 
		<property name="dataSource" ref="dataSource"/>-->
		<!-- 2/3 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
			</props>
		</property>
		<!-- 3/3 ORM -->
		<property name="packagesToScan">
			<list>
				<value>com.tz.spring.entity</value>
			</list>
		</property>
	</bean>
	
	<!-- 3.tm 事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!-- 4.dao -->
	<bean id="accountDao" class="com.tz.spring.dao.AccountDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!-- 5.service -->
	<bean id="accountService" class="com.tz.spring.service.AccountServiceImpl">
		<property name="accountDao" ref="accountDao"/>
	</bean>

    <bean id="myAroundAdvice" class="com.tz.spring.MyAroundAdvice">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <aop:config>
        <aop:aspect ref="myAroundAdvice">
            <aop:around method="around" pointcut="execution(* com.tz.spring.service.AccountServiceImpl.transfer(..))"/>
        </aop:aspect>
    </aop:config>

	<!-- 6.tx advice -->
	<!--<tx:advice id="txAdvice">-->
		<!--<tx:attributes>-->
			<!-- 定义方法具有怎样的传播行为和隔离级别 -->
			<!-- 在学习期间，所有切面设计的方法都用 同样的传播和隔离 -->
			<!--<tx:method name="*" propagation="REQUIRED" isolation="DEFAULT" read-only="false"/>-->
			
			<!-- 在实际项目开发，可能采取以下配置
			<tx:method name="get*" readonly="true"/>提高查询效率 
			<tx:method name="save*" propagation="REQUIRED" isolation="READ_COMMITTED"/>
			<tx:method name="update*" propagation="SUPPORTED" isolation="READ_COMMITTED"/>
			<tx:method name="delete*" propagation="REQUIRED" isolation="READ_COMMITTED"/> -->
		<!--</tx:attributes>-->
	<!--</tx:advice>-->

	<!-- 7.配置AOP-->
	<!--<aop:config>-->
		<!--<aop:advisor advice-ref="txAdvice" pointcut="execution(* com.tz.spring.service.AccountServiceImpl.*(..))"/>-->
	<!--</aop:config>	-->
           
</beans>